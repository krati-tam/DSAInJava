This problem is based on Disjoint Set Union :-
where i have to find the extra edge which can be remove to make the graph as a tree.

class Solution {
    class UnionFindSet {
        private int[] parents;
        private int[] ranks;
 
        public UnionFindSet(int n) {
            parents= new int[n + 1];
            ranks= new int[n + 1];
            for (int i = 0; i < parents.length; ++i) {
                parents[i] = i;
                ranks[i] = 1;
            }
        }
 
        public boolean Union(int u, int v) {
            int pu = Find(u);
            int pv = Find(v);
            if (pu == pv) return false;
 
            if (ranks[pv] > ranks[pu])
                parents[pu] = pv;           
            else if (ranks[pu] > ranks[pv])
                parents[pv] = pu;
            else {
                parents[pv] = pu;
                ranks[pu] += 1;
            }
 
            return true;
        }
 
        public int Find(int u) {
            while (parents[u] != u) {
                parents[u] = parents[parents[u]];
                u = parents[u];
            }
            return u;
        }
    }
    
    public int[] findRedundantConnection(int[][] edges) {
        UnionFindSet s = new UnionFindSet(edges.length);
        for (int[] edge : edges)
            if (!s.Union(edge[0], edge[1]))
                return edge;
        return null;
    }   
}
